/* Manila-Rapid NewGRF For OpenTTD
Copyright (C) 2020  Jacob Payag

This file is part of the Manila-Rapid NewGRF based on 2ccts by Transportman

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/


//this file is used to define the costs of vehicles
#define	PURCHASE_COST cost_factor: PURCHASECOSTVALUE;
#define RUNNING_COST running_cost_factor: RUNNINGCOSTVALUE;

#define RUNNING_COST_ENGINE

#define RUNNING_COST_MU

#define RUNNING_COST_ENGINE_CALL
#define RUNNING_COST_MU_UNPOWERED_CALL running_cost_factor: int(SPEED/10);
#define RUNNING_COST_MU_POWERED_CALL running_cost_factor: int(SPEED/10+SQRT(POWER)/10+TE_COEFFICIENT*WEIGHT);

// Use Newton's method to approximate the square root
#define SQRTESTIMATE(VALUE,GUESS) (GUESS-((GUESS*GUESS)-VALUE )/(0.1+2*GUESS))

#define SQRT(VALUE) SQRTESTIMATE(VALUE,SQRTESTIMATE(VALUE,SQRTESTIMATE(VALUE,VALUE/180)))

// default values
#define PURCHASECOSTVALUE 0
#define RUNNINGCOSTVALUE 0




// Engines
#define PURCHASECOSTENGINEVALUE(SCALAR, WFACTOR, SFACTOR, PFACTOR, TEFACTOR) SCALAR*(WFACTOR*WEIGHT+SFACTOR*SQRT(SPEED)+PFACTOR*SQRT(POWER)+TEFACTOR*TE_COEFFICIENT)
#define RUNNINGCOSTENGINEVALUE(SCALAR, SFACTOR, PFACTOR, TEFACTOR) SCALAR*(SFACTOR*SQRT(SPEED)+PFACTOR*SQRT(POWER)+TEFACTOR*TE_COEFFICIENT)

// Steam engine
#define PURCHASE_STEAM PURCHASECOSTENGINEVALUE(0.5, 0.1, 0.05, 0.5, 0.5)
#define RUNNING_STEAM RUNNINGCOSTENGINEVALUE(0.5, 0.01, 0.5, 0.5)

// Diesel engine
#define PURCHASE_DIESEL PURCHASECOSTENGINEVALUE(0.5, 0.1, 0.05, 0.5, 0.5)
#define RUNNING_DIESEL RUNNINGCOSTENGINEVALUE(0.5, 0.01, 0.5, 0.5)

// Electric engine
#define PURCHASE_ELECTRIC PURCHASECOSTENGINEVALUE(0.5, 0.1, 0.05, 0.5, 0.5)
#define RUNNING_ELECTRIC RUNNINGCOSTENGINEVALUE(0.5, 0.01, 0.5, 0.5)

// MUs
#define PURCHASECOSTMUVALUE(SCALAR, WFACTOR, SFACTOR, PFACTOR, HCAPFACTOR, WCAPFACTOR, TEFACTOR) SCALAR*(WFACTOR*WEIGHT+SFACTOR*SQRT(SPEED)+PFACTOR*SQRT(POWER)+max(HCAPFACTOR*SQRT(HEAD_CAPACITY),WCAPFACTOR*SQRT(WAGON_CAPACITY))+TEFACTOR*TE_COEFFICIENT)
#define RUNNINGCOSTMUVALUE(SCALAR, SFACTOR, PFACTOR, HCAPFACTOR, WCAPFACTOR, TEFACTOR) SCALAR*(SFACTOR*SQRT(SPEED)+PFACTOR*SQRT(POWER)+max(HCAPFACTOR*SQRT(HEAD_CAPACITY), WCAPFACTOR*SQRT(WAGON_CAPACITY))+TEFACTOR*TE_COEFFICIENT)

// DMU
#define PURCHASE_DMU PURCHASECOSTMUVALUE(0.5, 0.1, 0.05, 0.5, 0.5, 0.5, 0.5)
#define RUNNING_DMU RUNNINGCOSTMUVALUE(0.5, 0.01, 0.5, 0.5, 0.5, 0.5)

// EMU
#define PURCHASE_EMU PURCHASECOSTMUVALUE(0.5, 0.1, 0.05, 0.5, 0.5, 0.5, 0.5)
#define RUNNING_EMU RUNNINGCOSTMUVALUE(0.5, 0.01, 0.5, 0.5, 0.5, 0.5)



// Wagons and coaches
#define PURCHASECOSTNONENGINEVALUE(SCALAR, WFACTOR, SFACTOR, CAPFACTOR) SCALAR*(WFACTOR*WEIGHT+SFACTOR*SQRT(SPEED)+CAPFACTOR*HEAD_CAPACITY)
#define RUNNINGCOSTNONENGINEVALUE(SCALAR, SFACTOR, CAPFACTOR) SCALAR*(SFACTOR*SQRT(SPEED)+HEAD_CAPACITY)

// Wagon
#define PURCHASE_WAGON PURCHASECOSTNONENGINEVALUE(0.5, 0.1, 0.05, 0.5)
#define RUNNING_WAGON RUNNINGCOSTNONENGINEVALUE(0.5, 0.01, 0.5)

// Coach
#define PURCHASE_COACH PURCHASECOSTNONENGINEVALUE(0.5, 0.1, 0.05, 0.5)
#define RUNNING_COACH RUNNINGCOSTNONENGINEVALUE(0.5, 0.01, 0.5)


// MU wagonds
#define RUNNING_MU running_cost_factor: 0;
#define PURCHASE_MU_POWERED cost_factor: 200;
#define PURCHASE_MU_UNPOWERED cost_factor: 100;